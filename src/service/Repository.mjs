// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "sury/src/S.mjs";
import * as Stack from "../domain/api/entity/Stack.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function progressId(id) {
  return "progress-" + id;
}

var $$Storage = {
  progressId: progressId
};

async function fetchData(path) {
  console.log("FETCHING " + path);
  try {
    var response = await fetch(path);
    return await response.text();
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    if (error.RE_EXN_ID === Js_exn.$$Error) {
      console.log("Error fetching data: ", error._1);
    } else {
      console.log("Unknown error");
    }
    return ;
  }
}

var Browser = {
  fetchData: fetchData
};

function make(stacksPath) {
  return {
          stack: {
            toc: (async function (path) {
                var body = await fetchData(path + "/stacks-toc.json");
                if (body !== undefined) {
                  return S.parseJsonStringOrThrow(body, Stack.tocSchema);
                } else {
                  return [];
                }
              }),
            get: (async function (id) {
                var body = await fetchData(stacksPath + "/" + id + ".json");
                if (body !== undefined) {
                  return S.parseJsonStringOrThrow(body, Stack.stackSchema);
                }
                
              })
          },
          progress: {
            get: (async function (id) {
                var body = localStorage.getItem(progressId(id));
                if (body === null || body === undefined) {
                  return ;
                } else {
                  return S.parseJsonStringOrThrow(body, Stack.progressSchema);
                }
              }),
            save: (async function (progress) {
                localStorage.setItem(progressId(progress.id), Core__Option.getExn(JSON.stringify(S.reverseConvertOrThrow(progress, Stack.progressSchema), undefined, 2), undefined));
              })
          }
        };
}

export {
  $$Storage ,
  Browser ,
  make ,
}
/* S Not a pure module */
