// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as Recall from "../feature/Recall.mjs";
import * as Vitest from "vitest";
import * as VitestBdd from "vitest-bdd";
import * as Core__Float from "@rescript/core/src/Core__Float.mjs";
import * as CardProgress from "../api/entity/CardProgress.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";

function shuffle(array) {
  array.sort(function (a, b) {
        return Caml.string_compare(a.id, b.id);
      });
}

var mockRepo_stack = {
  toc: (async function (_path) {
      return [];
    }),
  get: (async function (_id) {
      
    })
};

var mockRepo_progress = {
  get: (async function (_id) {
      
    }),
  save: (async function (_progress) {
      
    })
};

var mockRepo_settings = {
  get: (function (_key) {
      return null;
    }),
  save: (function (_key, _value) {
      
    })
};

var mockRepo = {
  stack: mockRepo_stack,
  progress: mockRepo_progress,
  settings: mockRepo_settings
};

VitestBdd.Given("stacks", (function (param, table) {
        var step = param.step;
        var pair = {};
        VitestBdd.toRecords(table).forEach(function (record) {
              var stackId = Core__Option.getExn(record.stackId, undefined);
              var id = Core__Option.getExn(record.id, undefined);
              var card_options = [];
              var card = {
                id: id,
                stackId: stackId,
                content: "",
                solution: "",
                options: card_options
              };
              var timestamp = record.timestamp;
              var cprog = timestamp !== undefined && timestamp !== "" ? ({
                    timestamp: Core__Option.getExn(Core__Float.fromString(timestamp), undefined),
                    state: CardProgress.ofString(Core__Option.getExn(record.state, undefined))
                  }) : undefined;
              var match = pair[stackId];
              if (match !== undefined) {
                match.stack.cards.push(card);
                if (cprog !== undefined) {
                  match.prog.cards[id] = cprog;
                  return ;
                } else {
                  return ;
                }
              }
              var stack_info = {
                id: stackId,
                title: "",
                kind: "cards",
                level: "regular",
                chapter: "",
                course: "",
                tags: [],
                count: undefined
              };
              var stack_cards = [card];
              var stack = {
                info: stack_info,
                cards: stack_cards
              };
              var prog = {
                id: stackId,
                active: true,
                cards: {}
              };
              if (cprog !== undefined) {
                prog.cards[id] = cprog;
              }
              pair[stackId] = {
                stack: stack,
                prog: prog
              };
            });
        step("the next recall for {number} cards should be", (function (nb, table) {
                var cards = VitestBdd.toStrings(table);
                var nextRecall = Recall.nextRecall(Object.values(pair), shuffle, 1000, nb | 0, 100).map(function (card) {
                      return card.id;
                    });
                Vitest.expect(nextRecall).toEqual(cards);
              }));
        step("the next cards for {number} cards should be", (function (nb, table) {
                var cards = VitestBdd.toRecords(table);
                var recall = Recall.make(mockRepo, Object.values(pair), shuffle, 1000, nb | 0, 100);
                cards.forEach(function (card) {
                      var id = Core__Option.getExn(card.id, undefined);
                      var toRecall = Core__Option.getExn(card.toRecall, undefined) | 0;
                      var stackCount = Core__Option.getExn(card.stackCount, undefined) | 0;
                      Vitest.expect(recall.stats.toRecall).toBe(toRecall);
                      Vitest.expect(recall.stats.stackCount).toBe(stackCount);
                      if (id === "none") {
                        return Vitest.expect(recall.card).toBe(undefined);
                      }
                      var $$eval = Core__Option.getExn(card.eval, undefined);
                      var card$1 = recall.card;
                      if (card$1 !== undefined) {
                        Vitest.expect(card$1.id).toBe(id);
                        return recall.evaluate(CardProgress.ofString($$eval));
                      } else {
                        return Vitest.expect(undefined).toBe(id);
                      }
                    });
              }));
      }));

export {
  shuffle ,
  mockRepo ,
}
/*  Not a pure module */
