// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as Recall from "../feature/Recall.mjs";
import * as Vitest from "vitest";
import * as VitestBdd from "vitest-bdd";
import * as Core__Float from "@rescript/core/src/Core__Float.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";

VitestBdd.Given("stacks", (function (param, table) {
        var pair = {};
        VitestBdd.toRecords(table).forEach(function (record) {
              var stackId = Core__Option.getExn(record.stackId, undefined);
              var id = Core__Option.getExn(record.id, undefined);
              var card_options = [];
              var card = {
                id: id,
                stackId: stackId,
                content: "",
                solution: "",
                options: card_options
              };
              var recall = record.recall;
              var cprog = recall !== undefined && recall !== "" ? ({
                    timestamp: 0,
                    recall: Core__Option.getExn(Core__Float.fromString(recall), undefined),
                    state: "good"
                  }) : undefined;
              var match = pair[stackId];
              if (match !== undefined) {
                match.stack.cards.push(card);
                if (cprog !== undefined) {
                  match.prog.cards[id] = cprog;
                  return ;
                } else {
                  return ;
                }
              }
              var stack_info = {
                id: stackId,
                title: "",
                kind: "cards",
                level: "regular",
                chapter: "",
                course: "",
                tags: [],
                count: undefined
              };
              var stack_cards = [card];
              var stack = {
                info: stack_info,
                cards: stack_cards
              };
              var prog = {
                id: stackId,
                active: true,
                cards: {}
              };
              if (cprog !== undefined) {
                prog.cards[id] = cprog;
              }
              pair[stackId] = {
                stack: stack,
                prog: prog
              };
            });
        param.step("the next recall for {number} cards should be", (function (nb, table) {
                var cards = VitestBdd.toStrings(table);
                var nextRecall = Recall.nextRecall(Object.values(pair), nb | 0, 1000).toSorted(function (a, b) {
                        return Caml.string_compare(a.id, b.id);
                      }).map(function (card) {
                      return card.id;
                    });
                Vitest.expect(nextRecall).toEqual(cards);
              }));
      }));

export {
  
}
/*  Not a pure module */
