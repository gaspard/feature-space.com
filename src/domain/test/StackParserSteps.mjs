// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Vitest from "vitest";
import * as Nodefs from "node:fs";
import * as Nodepath from "node:path";
import * as VitestBdd from "vitest-bdd";
import * as StackParser from "../feature/StackParser.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";

var fixtures = Nodepath.join(process.cwd(), "src/domain/test/fixtures");

function readFixture(filename) {
  return Nodefs.readFileSync(Nodepath.join(fixtures, filename), "utf8");
}

VitestBdd.Given("a {string} file content", (function (param, filename) {
        var step = param.step;
        var content = readFixture(filename);
        var stackRef = {
          contents: undefined
        };
        step("I parse the stack", (function () {
                stackRef.contents = StackParser.parse(content);
              }));
        step("the stack info should contain", (function (table) {
                var stack = Core__Option.getExn(stackRef.contents, undefined);
                var records = VitestBdd.toRecords(table);
                records.forEach(function (record) {
                      var field = Core__Option.getExn(record.field, undefined);
                      var value = Core__Option.getExn(record.value, undefined);
                      switch (field) {
                        case "chapter" :
                            return Vitest.expect(stack.info.chapter).toBe(value);
                        case "course" :
                            return Vitest.expect(stack.info.course).toBe(value);
                        case "id" :
                            return Vitest.expect(stack.info.id).toBe(value);
                        case "kind" :
                            var kind;
                            switch (value) {
                              case "Quiz" :
                                  kind = "quiz";
                                  break;
                              default:
                                kind = "cards";
                            }
                            return Vitest.expect(stack.info.kind).toBe(kind);
                        case "level" :
                            var level;
                            switch (value) {
                              case "Pro" :
                                  level = "pro";
                                  break;
                              default:
                                level = "regular";
                            }
                            return Vitest.expect(stack.info.level).toBe(level);
                        case "tags" :
                            var tags = value.split(",").map(function (prim) {
                                  return prim.trim();
                                });
                            return Vitest.expect(stack.info.tags).toEqual(tags);
                        case "title" :
                            return Vitest.expect(stack.info.title).toBe(value);
                        default:
                          return ;
                      }
                    });
              }));
      }));

export {
  fixtures ,
  readFixture ,
}
/* fixtures Not a pure module */
