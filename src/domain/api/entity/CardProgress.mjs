// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "sury/src/S.mjs";
import * as Core__Int from "@rescript/core/src/Core__Int.mjs";

function recallTime(timestamp, s, dayLengthOpt) {
  var dayLength = dayLengthOpt !== undefined ? dayLengthOpt : 3600 * 24;
  if (typeof s === "object") {
    return timestamp + 6 * dayLength * Math.pow(s._0, 2);
  }
  switch (s) {
    case "again" :
        return timestamp + 0 * dayLength;
    case "hard" :
        return timestamp + 1 * dayLength;
    case "good" :
        return timestamp + 3 * dayLength;
    
  }
}

function next(prev, state) {
  var state$1;
  var exit = 0;
  if (prev !== undefined) {
    var i = prev.state;
    if (typeof i !== "object") {
      exit = 1;
    } else {
      state$1 = typeof state !== "object" ? state : ({
            kind: "easy",
            _0: i._0 + 1 | 0
          });
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    state$1 = typeof state !== "object" ? state : ({
          kind: "easy",
          _0: 1
        });
  }
  var timestamp = Date.now();
  return {
          timestamp: timestamp,
          state: state$1
        };
}

function ofString(s) {
  switch (s) {
    case "Again" :
        return "again";
    case "Good" :
        return "good";
    case "Hard" :
        return "hard";
    default:
      if (s.startsWith("Easy:")) {
        var i = Core__Int.fromString(s.slice(5), undefined);
        if (i !== undefined) {
          return {
                  kind: "easy",
                  _0: i
                };
        } else {
          return {
                  kind: "easy",
                  _0: 1
                };
        }
      }
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "'" + s + "' is not a valid state",
            Error: new Error()
          };
  }
}

var easySchema = S.schema(function (s) {
      return {
              kind: "easy",
              _0: s.m(S.$$int)
            };
    });

var progressSchema = S.object(function (s) {
      return {
              timestamp: s.f("timestamp", S.$$float),
              state: s.f("state", S.union([
                        S.literal("again"),
                        S.literal("hard"),
                        S.literal("good"),
                        easySchema
                      ]))
            };
    });

var again = 0;

var hard = 1;

var good = 3;

var easy = 6;

export {
  again ,
  hard ,
  good ,
  easy ,
  recallTime ,
  next ,
  ofString ,
  easySchema ,
  progressSchema ,
}
/* easySchema Not a pure module */
