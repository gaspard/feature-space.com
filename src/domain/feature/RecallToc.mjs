// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Tilia from "tilia/src/Tilia.mjs";

async function loadProgress(prog, set, info) {
  var p = await prog.get(info.id);
  if (p !== undefined) {
    return set([
                info,
                {
                  TAG: "Started",
                  _0: p
                }
              ]);
  } else {
    return set([
                info,
                "NotStarted"
              ]);
  }
}

async function stacks(repo, setList) {
  var list = (await repo.stack.toc()).map(function (info) {
        return [
                info,
                "Loading"
              ];
      });
  setList(list);
  list.forEach(function (param, i) {
        loadProgress(repo.progress, (function (extra) {
                list[i] = extra;
              }), param[0]);
      });
}

function setActive(param, list) {
  var save = param.save;
  return function (id, active) {
    var i = list.value.findIndex(function (param) {
          return param[0].id === id;
        });
    if (i === -1) {
      return ;
    }
    var match = list.value[i];
    if (match === undefined) {
      return ;
    }
    var p = match[1];
    var info = match[0];
    if (typeof p !== "object") {
      if (p === "Loading") {
        return ;
      }
      var p$1 = {
        id: info.id,
        active: active,
        cards: new Map()
      };
      list.value[i] = [
        info,
        {
          TAG: "Started",
          _0: p$1
        }
      ];
      save(p$1);
      return ;
    } else {
      var p$2 = p._0;
      p$2.active = active;
      save(p$2);
      return ;
    }
  };
}

function make(repo) {
  var match = Tilia.signal([]);
  var list = match[0];
  stacks(repo, match[1]);
  return Tilia.tilia({
              stacks: Tilia.lift(list),
              setActive: setActive(repo.progress, list)
            });
}

export {
  loadProgress ,
  stacks ,
  setActive ,
  make ,
}
/* Tilia Not a pure module */
