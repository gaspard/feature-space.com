// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Tilia from "tilia/src/Tilia.mjs";
import * as Recall from "./Recall.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.mjs";
import * as Core__Float from "@rescript/core/src/Core__Float.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as Core__Nullable from "@rescript/core/src/Core__Nullable.mjs";

function start(repo) {
  return function (param) {
    var dayLength = param.dayLength;
    var stacks = param.stacks;
    return async function (setRecall) {
      var stacks$1 = Core__Array.keepSome(await Promise.all(stacks.map(async function (param) {
                    var prog = param.prog;
                    var info = param.info;
                    if (typeof prog !== "object") {
                      return ;
                    }
                    var prog$1 = prog._0;
                    if (!prog$1.active) {
                      return ;
                    }
                    var stack = await repo.stack.get(info.id);
                    if (stack !== undefined) {
                      return {
                              stack: stack,
                              prog: prog$1
                            };
                    } else {
                      console.log("Stack not found: ", info.id);
                      return ;
                    }
                  })));
      return setRecall(Recall.make(repo, stacks$1, undefined, undefined, undefined, dayLength * 3600));
    };
  };
}

async function loadProgress(prog, set, info) {
  var p = await prog.get(info.id);
  if (p !== undefined) {
    return set({
                info: info,
                prog: {
                  TAG: "Started",
                  _0: p
                }
              });
  } else {
    return set({
                info: info,
                prog: "NotStarted"
              });
  }
}

function stacks(repo, path) {
  return async function (setList) {
    var list = (await repo.stack.toc(path)).map(function (info) {
          return {
                  info: info,
                  prog: "Loading"
                };
        });
    setList(list);
    list.forEach(function (param, i) {
          loadProgress(repo.progress, (function (extra) {
                  list[i] = extra;
                }), param.info);
        });
  };
}

function setActive(param) {
  var save = param.save;
  return function (param) {
    var stacks = param.stacks;
    return function (id, active) {
      var i = stacks.findIndex(function (v) {
            return v.info.id === id;
          });
      if (i === -1) {
        return ;
      }
      var match = stacks[i];
      if (match === undefined) {
        return ;
      }
      var p = match.prog;
      var info = match.info;
      if (typeof p !== "object") {
        if (p === "Loading") {
          return ;
        }
        var p$1 = {
          id: info.id,
          active: active,
          cards: {}
        };
        stacks[i] = {
          info: info,
          prog: {
            TAG: "Started",
            _0: p$1
          }
        };
        save(p$1);
        return ;
      } else {
        var p$2 = p._0;
        p$2.active = active;
        save(p$2);
        return ;
      }
    };
  };
}

function cardCount(param) {
  var active = function (prog) {
    if (typeof prog !== "object") {
      return false;
    } else {
      return prog._0.active;
    }
  };
  return Core__Array.reduce(param.stacks, 0, (function (acc, param) {
                return acc + (
                        active(param.prog) ? Core__Option.getOr(param.info.count, 0) : 0
                      ) | 0;
              }));
}

function make(repo, path) {
  var day = Core__Option.getOr(Core__Float.fromString(Core__Nullable.getOr(repo.settings.get("dayLength"), "24")), 24);
  var match = Tilia.signal(day);
  var setDayLength = match[1];
  var dayLength = match[0];
  var setDayLength$1 = function (value) {
    repo.settings.save("dayLength", value.toString());
    setDayLength(value);
  };
  return Tilia.carve(function (param) {
              var derived = param.derived;
              return {
                      stacks: Tilia.source(stacks(repo, path), []),
                      setActive: derived(setActive(repo.progress)),
                      start: derived(start(repo)),
                      cardCount: derived(cardCount),
                      setDayLength: setDayLength$1,
                      dayLength: Tilia.lift(dayLength)
                    };
            });
}

export {
  start ,
  loadProgress ,
  stacks ,
  setActive ,
  cardCount ,
  make ,
}
/* Tilia Not a pure module */
