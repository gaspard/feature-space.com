// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "sury/src/S.mjs";
import * as Stack from "../api/entity/Stack.mjs";
import GrayMatter from "gray-matter";

var contentRe = new RegExp("^(.*?)\\s*<details>", "s");

var solutionRe = new RegExp("[\\s\\S]*?<summary>.*?</summary>([\\s\\S]*?)</details>");

function makeId() {
  var idx = {
    contents: 0
  };
  return function () {
    idx.contents = idx.contents + 1 | 0;
    return idx.contents.toString();
  };
}

function getOptions(content) {
  var id = makeId();
  var options = [];
  var rest = [];
  content.split("\n").forEach(function (l) {
        if (l.startsWith("- [x]") || l.startsWith("- [ ]")) {
          options.push({
                id: id(),
                text: l.slice(5),
                correct: true
              });
        } else {
          rest.push(l);
        }
      });
  return [
          rest.join("\n"),
          options
        ];
}

function parseCards(stackId, body) {
  var id = makeId();
  return body.split("\n---\n").map(function (prim) {
                  return prim.trim();
                }).filter(function (s) {
                if (s !== "" && !s.startsWith("# ")) {
                  return !s.startsWith("## ");
                } else {
                  return false;
                }
              }).map(function (text) {
              var r = contentRe.exec(text);
              var match;
              if (r == null) {
                console.log("Cannot extract content\n==================");
                console.log(text);
                console.log("==================");
                throw {
                      RE_EXN_ID: "Invalid_argument",
                      _1: "Cannot extract content",
                      Error: new Error()
                    };
              }
              match = [
                r[1],
                text.slice(r[0].length)
              ];
              var text$1 = match[1];
              var match$1 = getOptions(match[0]);
              var r$1 = solutionRe.exec(text$1);
              var match$2;
              if (r$1 == null) {
                console.log("Cannot extract solution\n==================");
                console.log(text$1);
                console.log("==================");
                throw {
                      RE_EXN_ID: "Invalid_argument",
                      _1: "Cannot extract solution",
                      Error: new Error()
                    };
              }
              match$2 = [
                r$1[1],
                text$1.slice(r$1[0].length)
              ];
              return {
                      id: id(),
                      stackId: stackId,
                      content: match$1[0],
                      solution: match$2[0],
                      options: match$1[1]
                    };
            });
}

function parse(content) {
  var match = GrayMatter(content);
  var info = S.parseOrThrow(match.data, Stack.infoSchema);
  return {
          info: info,
          cards: parseCards(info.id, match.content)
        };
}

export {
  contentRe ,
  solutionRe ,
  makeId ,
  getOptions ,
  parseCards ,
  parse ,
}
/* contentRe Not a pure module */
