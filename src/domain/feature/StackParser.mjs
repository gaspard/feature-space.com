// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "sury/src/S.mjs";
import * as Stack from "../api/entity/Stack.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import GrayMatter from "gray-matter";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";

var contentRe = /^(.*?)\s*<details>/s;

var solutionRe = /[\s\S]*?<summary>.*?<\/summary>([\s\S]*?)<\/details>/;

function makeId() {
  var idx = {
    contents: 0
  };
  return function () {
    idx.contents = idx.contents + 1 | 0;
    return idx.contents.toString();
  };
}

function getOptions(content) {
  var id = makeId();
  var options = [];
  var rest = [];
  content.split("\n").forEach(function (l) {
        if (l.startsWith("- [x]")) {
          options.push({
                id: id(),
                content: l.slice(5).trim(),
                correct: true
              });
        } else if (l.startsWith("- [ ]")) {
          options.push({
                id: id(),
                content: l.slice(5).trim(),
                correct: false
              });
        } else {
          rest.push(l);
        }
      });
  return [
          rest.join("\n"),
          options
        ];
}

function parseCards(stackId, body) {
  var id = makeId();
  return body.split("\n---\n").map(function (prim) {
                  return prim.trim();
                }).filter(function (s) {
                if (s !== "" && !s.startsWith("# ")) {
                  return !s.startsWith("## ");
                } else {
                  return false;
                }
              }).map(function (text) {
              var r = contentRe.exec(text);
              var match = (r == null) ? (console.log("Cannot extract content\n=================="), console.log(text), console.log("=================="), Js_exn.raiseError("Cannot extract content")) : [
                  r[1],
                  text.slice(r[0].length)
                ];
              var text$1 = match[1];
              var match$1 = getOptions(match[0]);
              var r$1 = solutionRe.exec(text$1);
              var match$2 = (r$1 == null) ? (console.log("Cannot extract solution\n=================="), console.log(text$1), console.log("=================="), Js_exn.raiseError("Cannot extract solution")) : [
                  r$1[1],
                  text$1.slice(r$1[0].length)
                ];
              return {
                      id: id(),
                      stackId: stackId,
                      content: match$1[0],
                      solution: match$2[0],
                      options: match$1[1]
                    };
            });
}

function parse(content) {
  var match = GrayMatter(content);
  var info = S.parseOrThrow(match.data, Stack.infoSchema);
  var cards = parseCards(info.id, match.content);
  return {
          info: {
            id: info.id,
            title: info.title,
            kind: info.kind,
            level: info.level,
            chapter: info.chapter,
            course: info.course,
            tags: info.tags,
            count: cards.length
          },
          cards: cards
        };
}

var pathRe = /(\.cards|\.quiz)$/;

function makeStacksToJson(fs, path) {
  return function (dir, outdir, stacksDir) {
    if (!fs.existsSync(stacksDir)) {
      fs.mkdirSync(stacksDir);
    }
    var aux = function (dir, outdir) {
      if (!fs.existsSync(outdir)) {
        fs.mkdirSync(outdir);
      }
      var toc = [];
      fs.readdirSync(dir).forEach(function (dirent) {
            if (!(dirent.name.endsWith(".cards") || dirent.name.endsWith(".quiz"))) {
              if (dirent.isDirectory()) {
                Caml_splice_call.spliceObjApply(toc, "push", [aux(path.join(dir, dirent.name), path.join(outdir, dirent.name))]);
                return ;
              } else {
                return ;
              }
            }
            var p = path.join(dir, dirent.name);
            var stack = parse(fs.readFileSync(p, "utf-8"));
            toc.push(stack.info);
            var json = Core__Option.getExn(JSON.stringify(S.reverseConvertOrThrow(stack, Stack.stackSchema), undefined, 2), undefined);
            fs.writeFileSync(path.join(stacksDir, stack.info.id + ".json"), json, "utf-8");
          });
      if (toc.length > 0) {
        var json = Core__Option.getExn(JSON.stringify(S.reverseConvertOrThrow(toc, Stack.tocSchema), undefined, 2), undefined);
        fs.writeFileSync(path.join(outdir, "stacks-toc.json"), json, "utf-8");
      }
      return toc;
    };
    return aux(dir, outdir);
  };
}

export {
  contentRe ,
  solutionRe ,
  makeId ,
  getOptions ,
  parseCards ,
  parse ,
  pathRe ,
  makeStacksToJson ,
}
/* S Not a pure module */
