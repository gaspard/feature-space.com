// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Tilia from "tilia/src/Tilia.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Core__Array from "@rescript/core/src/Core__Array.mjs";
import * as CardProgress from "../api/entity/CardProgress.mjs";

function back(saveProgress, card, options, set) {
  var options$1 = options.map(function (option) {
        var match = option.checked;
        var match$1 = option.correct;
        var correction = match ? (
            match$1 ? "Correct" : "Incorrect"
          ) : (
            match$1 ? "Missed" : "Blank"
          );
        return {
                id: option.id,
                content: option.content,
                checked: option.checked,
                correction: correction
              };
      });
  set({
        TAG: "Back",
        _0: {
          content: card.content,
          solution: card.solution,
          options: options$1,
          evaluate: saveProgress
        }
      });
}

function front(saveProgress, card) {
  return function (set) {
    var card$1 = card.value;
    if (card$1 === undefined) {
      return Js_exn.raiseError("No card selected");
    }
    var options = Tilia.tilia(card$1.options.map(function (option) {
              return {
                      id: option.id,
                      content: option.content,
                      correct: option.correct,
                      checked: false
                    };
            }));
    return {
            TAG: "Front",
            _0: {
              content: card$1.content,
              options: options,
              turn: (function () {
                  back(saveProgress, card$1, options, set);
                })
            }
          };
  };
}

var Ui = {
  back: back,
  front: front
};

function sort(cards) {
  return cards.toSorted(function (param, param$1) {
              var aProgress = param[1].recall;
              var bProgress = param$1[1].recall;
              if (aProgress < bProgress) {
                return -1.0;
              } else {
                return 1.0;
              }
            });
}

function nextRecall(stacks, maxOpt, nowOpt) {
  var max = maxOpt !== undefined ? maxOpt : 20;
  var now = nowOpt !== undefined ? nowOpt : Date.now();
  var newCards = [];
  var seenCards = [];
  stacks.forEach(function (param) {
        var prog = param.prog;
        param.stack.cards.forEach(function (card) {
              var progress = prog.cards[card.id];
              if (progress !== undefined) {
                seenCards.push([
                      card,
                      progress
                    ]);
              } else {
                newCards.push(card);
              }
            });
      });
  var seenCards$1 = sort(seenCards);
  var afterIdx = seenCards$1.findIndex(function (param) {
        return param[1].recall > now;
      });
  var toRecall = seenCards$1.slice(0, afterIdx).map(function (param) {
            return param[0];
          }).concat(newCards).slice(0, max);
  Core__Array.shuffle(toRecall);
  return toRecall;
}

function make(repo, stacks) {
  var recall = nextRecall(stacks, undefined, undefined);
  var match = Tilia.signal(0);
  var setCardIdx = match[1];
  var cardIdx = match[0];
  var card = Tilia.derived(function () {
        return recall[cardIdx.value];
      });
  var nextCard = function () {
    var idx = cardIdx.value + 1 | 0;
    if (idx < recall.length) {
      return setCardIdx(idx);
    }
    
  };
  var prog = Object.fromEntries(stacks.map(function (param) {
            var prog = param.prog;
            return [
                    prog.id,
                    prog
                  ];
          }));
  var saveProgress = function (state) {
    var card$1 = card.value;
    if (card$1 !== undefined) {
      var p = prog[card$1.stackId];
      if (p !== undefined) {
        p.cards[card$1.id] = CardProgress.next(p.cards[card$1.id], state);
        repo.progress.save(p);
      } else {
        Js_exn.raiseError("No progress found for card " + card$1.stackId);
      }
    } else {
      Js_exn.raiseError("No card selected");
    }
    nextCard();
  };
  return Tilia.tilia({
              view: Tilia.store(front(saveProgress, card))
            });
}

export {
  Ui ,
  sort ,
  nextRecall ,
  make ,
}
/* Tilia Not a pure module */
