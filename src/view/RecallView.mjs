// Generated by ReScript, PLEASE EDIT WITH CARE

import * as App from "./App.mjs";
import * as TiliaReact from "@tilia/react/src/TiliaReact.mjs";
import MarkdownTsx from "./Markdown.tsx";
import * as JsxRuntime from "react/jsx-runtime";

var make = MarkdownTsx;

var Markdown = {
  make: make
};

function RecallView$Front(props) {
  var front = props.front;
  TiliaReact.useTilia();
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx(make, {
                            text: front.content
                          }),
                      JsxRuntime.jsx("ul", {
                            children: front.options.map(function (option) {
                                  return JsxRuntime.jsxs("li", {
                                              children: [
                                                JsxRuntime.jsx("input", {
                                                      checked: option.checked,
                                                      type: "checkbox",
                                                      onChange: (function (param) {
                                                          
                                                        })
                                                    }),
                                                JsxRuntime.jsx(make, {
                                                      text: option.content
                                                    })
                                              ],
                                              onClick: (function (param) {
                                                  option.checked = !option.checked;
                                                })
                                            }, option.id);
                                }),
                            className: "options"
                          }),
                      JsxRuntime.jsx("div", {
                            children: JsxRuntime.jsx("details", {
                                  children: JsxRuntime.jsx("summary", {
                                        children: JsxRuntime.jsx("strong", {
                                              children: "Solution"
                                            })
                                      }),
                                  open: false
                                }),
                            className: "card-anwser",
                            onClick: (function (param) {
                                front.turn();
                              })
                          })
                    ],
                    className: "card-question"
                  }),
              className: "card"
            });
}

var Front = {
  make: RecallView$Front
};

function correctionClassname(correction) {
  switch (correction) {
    case "Correct" :
        return "flex correct";
    case "Missed" :
        return "flex missed";
    case "Incorrect" :
        return "flex incorrect";
    case "Blank" :
        return "flex blank";
    
  }
}

function RecallView$Back(props) {
  var back = props.back;
  TiliaReact.useTilia();
  var hasErrors = back.options.some(function (option) {
        if (option.correction === "Missed") {
          return true;
        } else {
          return option.correction === "Incorrect";
        }
      });
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx(make, {
                              text: back.content
                            }),
                        JsxRuntime.jsx("ul", {
                              children: back.options.map(function (option) {
                                    return JsxRuntime.jsxs("li", {
                                                children: [
                                                  JsxRuntime.jsx("input", {
                                                        defaultChecked: option.checked,
                                                        type: "checkbox"
                                                      }),
                                                  JsxRuntime.jsx(make, {
                                                        text: "\n\n" + option.content + "\n\n"
                                                      })
                                                ],
                                                className: correctionClassname(option.correction)
                                              }, option.id);
                                  }),
                              className: "options"
                            })
                      ],
                      className: "card-question"
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsxs("details", {
                            children: [
                              JsxRuntime.jsx("summary", {
                                    children: JsxRuntime.jsx("strong", {
                                          children: "Solution"
                                        })
                                  }),
                              JsxRuntime.jsxs("div", {
                                    children: [
                                      JsxRuntime.jsx("button", {
                                            children: "Encore",
                                            className: "eval again",
                                            onClick: (function (param) {
                                                back.evaluate("again");
                                              })
                                          }),
                                      JsxRuntime.jsx("button", {
                                            children: "Difficile",
                                            className: "eval hard",
                                            onClick: (function (param) {
                                                back.evaluate("hard");
                                              })
                                          }),
                                      hasErrors ? JsxRuntime.jsx(JsxRuntime.Fragment, {}) : JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                              children: [
                                                JsxRuntime.jsx("button", {
                                                      children: "Bien",
                                                      className: "eval good",
                                                      onClick: (function (param) {
                                                          back.evaluate("good");
                                                        })
                                                    }),
                                                JsxRuntime.jsx("button", {
                                                      children: "Facile",
                                                      className: "eval easy",
                                                      onClick: (function (param) {
                                                          back.evaluate({
                                                                kind: "easy",
                                                                _0: 1
                                                              });
                                                        })
                                                    })
                                              ]
                                            })
                                    ],
                                    className: "card-evaluate"
                                  }),
                              JsxRuntime.jsx(make, {
                                    text: back.solution
                                  })
                            ],
                            open: true
                          }),
                      className: "card-answer",
                      onClick: (function (param) {
                          back.turn();
                        })
                    })
              ],
              className: "card"
            });
}

var Back = {
  correctionClassname: correctionClassname,
  make: RecallView$Back
};

function RecallView$Done(props) {
  TiliaReact.useTilia();
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx("div", {
                    children: JsxRuntime.jsxs("p", {
                          children: [
                            "Tout est terminé. Si vous voulez révixer encore, cliquez sur le bouton.",
                            JsxRuntime.jsx("button", {
                                  children: "Plus",
                                  className: "more",
                                  onClick: (function (param) {
                                      App.app.start();
                                    })
                                })
                          ]
                        }),
                    className: "card-question"
                  }),
              className: "card"
            });
}

var Done = {
  make: RecallView$Done
};

function RecallView(props) {
  var recall = props.recall;
  TiliaReact.useTilia();
  var front = recall.view;
  var tmp;
  tmp = typeof front !== "object" ? JsxRuntime.jsx(RecallView$Done, {}) : (
      front.TAG === "Front" ? JsxRuntime.jsx(RecallView$Front, {
              front: front._0
            }) : JsxRuntime.jsx(RecallView$Back, {
              back: front._0
            })
    );
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("span", {
                              children: "session"
                            }),
                        JsxRuntime.jsx("span", {
                              children: recall.stats.stackCount.toString(),
                              className: "col-span-3 font-bold text-left"
                            }),
                        JsxRuntime.jsx("span", {
                              children: "à réviser"
                            }),
                        JsxRuntime.jsx("span", {
                              children: recall.stats.toRecall.toString()
                            }),
                        JsxRuntime.jsx("span", {
                              children: "vues"
                            }),
                        JsxRuntime.jsx("span", {
                              children: recall.stats.seen.toString()
                            }),
                        JsxRuntime.jsx("span", {
                              children: "nouvelles"
                            }),
                        JsxRuntime.jsx("span", {
                              children: recall.stats.new.toString()
                            }),
                        JsxRuntime.jsx("span", {
                              children: "total"
                            }),
                        JsxRuntime.jsx("span", {
                              children: recall.stats.total.toString()
                            })
                      ],
                      className: "stats"
                    }),
                tmp
              ]
            });
}

var make$1 = RecallView;

export {
  Markdown ,
  Front ,
  Back ,
  Done ,
  make$1 as make,
}
/* make Not a pure module */
