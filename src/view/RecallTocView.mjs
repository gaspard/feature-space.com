// Generated by ReScript, PLEASE EDIT WITH CARE

import * as App from "./App.mjs";
import * as Stack from "../domain/api/entity/Stack.mjs";
import * as Utils from "../service/Utils.mjs";
import * as TiliaReact from "@tilia/react/src/TiliaReact.mjs";
import * as Core__Float from "@rescript/core/src/Core__Float.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function translateLevel(level) {
  if (level === "regular") {
    return "Parcours doux";
  } else {
    return "Parcours intensif";
  }
}

function translateType(stackType) {
  if (stackType === "cards") {
    return "Fiches de révision";
  } else {
    return "Quiz";
  }
}

function RecallTocView$ChapterProgress(props) {
  TiliaReact.useTilia();
  var prog = props.chapter.prog;
  if (typeof prog !== "object") {
    if (prog === "Loading") {
      return JsxRuntime.jsx("span", {
                  children: "Loading..."
                });
    } else {
      return JsxRuntime.jsx("input", {
                  checked: false,
                  type: "checkbox",
                  onChange: (function (param) {
                      
                    })
                });
    }
  } else {
    return JsxRuntime.jsx("input", {
                checked: prog._0.active,
                type: "checkbox",
                onChange: (function (param) {
                    
                  })
              });
  }
}

var ChapterProgress = {
  make: RecallTocView$ChapterProgress
};

function RecallTocView$ChapterItem(props) {
  var chapter = props.chapter;
  TiliaReact.useTilia();
  var match = App.app.toc;
  var setActive = match.setActive;
  var toggle = function (param) {
    var prog = chapter.prog;
    if (typeof prog !== "object") {
      if (prog === "Loading") {
        return ;
      } else {
        return setActive(chapter.info.id, true);
      }
    } else {
      return setActive(chapter.info.id, !prog._0.active);
    }
  };
  return JsxRuntime.jsxs("li", {
              children: [
                JsxRuntime.jsx("span", {
                      children: JsxRuntime.jsx(RecallTocView$ChapterProgress, {
                            chapter: chapter
                          }),
                      className: "toggle"
                    }),
                JsxRuntime.jsx("span", {
                      children: Stack.stackTypeToEmoji(chapter.info.kind),
                      className: "emoji"
                    }),
                " ",
                chapter.info.chapter
              ],
              onClick: toggle
            }, chapter.info.id);
}

var ChapterItem = {
  make: RecallTocView$ChapterItem
};

function RecallTocView$CourseGroup(props) {
  var courseGroup = props.courseGroup;
  TiliaReact.useTilia();
  return JsxRuntime.jsxs("section", {
              children: [
                JsxRuntime.jsx("h4", {
                      children: courseGroup.key
                    }),
                JsxRuntime.jsx("ul", {
                      children: courseGroup.list.map(function (chapter) {
                            return JsxRuntime.jsx(RecallTocView$ChapterItem, {
                                        chapter: chapter
                                      }, chapter.info.id);
                          })
                    })
              ],
              className: "course"
            }, courseGroup.key);
}

var CourseGroup = {
  make: RecallTocView$CourseGroup
};

function RecallTocView$TypeGroup(props) {
  var typeGroup = props.typeGroup;
  return JsxRuntime.jsxs("section", {
              children: [
                JsxRuntime.jsx("h3", {
                      children: JsxRuntime.jsxs("a", {
                            children: [
                              JsxRuntime.jsx("span", {
                                    children: Stack.stackTypeToEmoji(typeGroup.key),
                                    className: "emoji"
                                  }),
                              " ",
                              translateType(typeGroup.key)
                            ],
                            id: Stack.stackTypeToString(typeGroup.key),
                            href: "/#" + Stack.stackTypeToString(typeGroup.key)
                          })
                    }),
                Utils.partition(typeGroup.list, (function (v) {
                          return v.info.course;
                        })).map(function (courseGroup) {
                      return JsxRuntime.jsx(RecallTocView$CourseGroup, {
                                  courseGroup: courseGroup
                                }, courseGroup.key);
                    })
              ],
              className: "type"
            }, Stack.stackTypeToString(typeGroup.key));
}

var TypeGroup = {
  make: RecallTocView$TypeGroup
};

function RecallTocView$LevelGroup(props) {
  var levelGroup = props.levelGroup;
  return JsxRuntime.jsxs("section", {
              children: [
                JsxRuntime.jsx("h2", {
                      children: translateLevel(levelGroup.key),
                      className: Stack.levelToString(levelGroup.key)
                    }),
                Utils.partition(levelGroup.list, (function (v) {
                          return v.info.kind;
                        })).map(function (typeGroup) {
                      return JsxRuntime.jsx(RecallTocView$TypeGroup, {
                                  typeGroup: typeGroup,
                                  level: levelGroup.key
                                }, Stack.stackTypeToString(typeGroup.key));
                    })
              ],
              className: "level",
              id: Stack.levelToString(levelGroup.key)
            }, Stack.levelToString(levelGroup.key));
}

var LevelGroup = {
  make: RecallTocView$LevelGroup
};

function value(e) {
  return e.target.value;
}

var $$Event = {
  value: value
};

function RecallTocView(props) {
  TiliaReact.useTilia();
  var toc = App.app.toc;
  var levelGroups = Utils.partition(toc.stacks, (function (v) {
          return v.info.level;
        }));
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                JsxRuntime.jsx("p", {
                      children: "Séléctionnez les matières que vous souhaitez réviser et pressez sur start."
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("span", {
                              children: "base de répétition (en heures)"
                            }),
                        JsxRuntime.jsx("span", {
                              children: toc.dayLength.toString() + "h"
                            }),
                        JsxRuntime.jsx("input", {
                              max: "24",
                              min: "1",
                              type: "range",
                              value: toc.dayLength.toString(),
                              onChange: (function (e) {
                                  toc.setDayLength(Core__Option.getExn(Core__Float.fromString(value(e)), undefined));
                                })
                            })
                      ],
                      className: "settings"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("span", {
                              children: "nombre de fiches"
                            }),
                        JsxRuntime.jsx("span", {
                              children: toc.cardCount.toString()
                            })
                      ],
                      className: "settings"
                    }),
                JsxRuntime.jsx("button", {
                      children: "Start",
                      className: "start",
                      disabled: toc.cardCount === 0,
                      onClick: (function (param) {
                          App.app.start();
                        })
                    }),
                JsxRuntime.jsx("nav", {
                      children: levelGroups.toSorted(function (a, b) {
                              var levelOrder = function (level) {
                                if (level === "regular") {
                                  return 0;
                                } else {
                                  return 1;
                                }
                              };
                              return levelOrder(a.key) - levelOrder(b.key);
                            }).map(function (levelGroup) {
                            return JsxRuntime.jsx(RecallTocView$LevelGroup, {
                                        levelGroup: levelGroup
                                      }, Stack.levelToString(levelGroup.key));
                          }),
                      "aria-label": "Table des matières",
                      className: "toc"
                    })
              ]
            });
}

var make = RecallTocView;

export {
  translateLevel ,
  translateType ,
  ChapterProgress ,
  ChapterItem ,
  CourseGroup ,
  TypeGroup ,
  LevelGroup ,
  $$Event ,
  make ,
}
/* App Not a pure module */
