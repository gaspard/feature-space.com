---
export interface Props {
  content: string;
}

const { content } = Astro.props;
---

<div class="math-content" data-content={content}>
  <div class="content-placeholder">{content}</div>
</div>

<script>
  import katex from 'katex';

  document.addEventListener('DOMContentLoaded', () => {
    const mathContentElements = document.querySelectorAll('.math-content');
    
    mathContentElements.forEach((element) => {
      const content = element.getAttribute('data-content');
      const placeholder = element.querySelector('.content-placeholder');
      
      if (content && placeholder) {
        try {
          // Process the content to find and render math expressions
          const processedContent = processMathInContent(content);
          placeholder.innerHTML = processedContent;
        } catch (error) {
          console.warn('Math content processing error:', error);
          placeholder.innerHTML = content; // Fallback to original content
        }
      }
    });
  });

  function processMathInContent(content: string): string {
    // Regular expressions for inline and display math
    const displayMathRegex = /\$\$(.*?)\$\$/gs;
    const inlineMathRegex = /\$(.*?)\$/g;
    
    let processedContent = content;
    
    // Process display math first ($$...$$)
    processedContent = processedContent.replace(displayMathRegex, (match, expression) => {
      try {
        const rendered = katex.renderToString(expression.trim(), {
          displayMode: true,
          throwOnError: false,
          errorColor: '#cc0000',
          strict: 'warn'
        });
        return `<div class="math-display">${rendered}</div>`;
      } catch (error) {
        console.warn('Display math rendering error:', error);
        return `<div class="math-error" title="LaTeX Error: ${error.message}">$$${expression}$$</div>`;
      }
    });
    
    // Process inline math ($...$) - but avoid already processed display math
    processedContent = processedContent.replace(inlineMathRegex, (match, expression) => {
      // Skip if this is part of a display math block or already processed
      if (match.includes('math-display') || match.includes('math-error')) {
        return match;
      }
      
      try {
        const rendered = katex.renderToString(expression.trim(), {
          displayMode: false,
          throwOnError: false,
          errorColor: '#cc0000',
          strict: 'warn'
        });
        return `<span class="math-inline">${rendered}</span>`;
      } catch (error) {
        console.warn('Inline math rendering error:', error);
        return `<span class="math-error" title="LaTeX Error: ${error.message}">$${expression}$</span>`;
      }
    });
    
    return processedContent;
  }
</script>

<style>
  .math-content {
    line-height: 1.6;
  }
  
  .math-display {
    margin: 1em 0;
    text-align: center;
    overflow-x: auto;
  }
  
  .math-inline {
    display: inline;
    vertical-align: baseline;
  }
  
  .math-error {
    color: #cc0000;
    background-color: #ffe6e6;
    padding: 2px 4px;
    border-radius: 3px;
    border: 1px solid #ffcccc;
    cursor: help;
    display: inline-block;
  }
  
  /* Ensure proper text formatting around math */
  .math-content p {
    margin: 1em 0;
  }
  
  .math-content p:first-child {
    margin-top: 0;
  }
  
  .math-content p:last-child {
    margin-bottom: 0;
  }
</style>